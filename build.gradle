buildscript {
	repositories {
		maven { url = 'https://maven.minecraftforge.net' }
		maven { url = 'https://maven.parchmentmc.org' }
		maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${forge_gradle_version}", changing: true
		classpath 'org.parchmentmc:librarian:1.+'
		classpath "org.spongepowered:mixingradle:${mixin_gradle_version}"
	}
}

plugins {
	id 'com.github.johnrengelman.shadow' version "${gradle_shadow_version}"
	id 'com.matthewprenger.cursegradle' version "${cursegradle_version}"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'

version = "${minecraft_version}-${mod_version}"
group = "${mod_base_package}.${mod_id}"
archivesBaseName = "${mod_id}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

configurations {
	shade
}

minecraft {
	mappings channel: "${mappings_channel}", version: "${mappings_version}"
	accessTransformer = file('src/main/resources/META-INF/accessTransformer.cfg')

	runs {
		client {
			taskName 'Client'
			workingDirectory project.file('run/client')
			// property 'forge.logging.markers', 'REGISTRIES'
			// property 'forge.logging.console.level', 'debug'
			property 'fml.earlyprogresswindow', 'false'

			if(project.hasProperty('mc_uuid') & project.hasProperty('mc_username')) {
				args '--uuid', project.getProperty('mc_uuid'), '--username', project.getProperty('mc_username')
			}

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

		server {
			taskName 'Server'
			workingDirectory project.file('run/server')
			// property 'forge.logging.markers', 'REGISTRIES'
			// property 'forge.logging.console.level', 'debug'
			property 'fml.earlyprogresswindow', 'false'
			args 'nogui'

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

		data {
			taskName 'Data'
			workingDirectory project.file('run/client')
			// property 'forge.logging.markers', 'REGISTRIES'
			// property 'forge.logging.console.level', 'debug'
			property 'fml.earlyprogresswindow', 'false'
			args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
			// ForgeGradle will just force-exit the Gradle Daemon which fails our builds in case
			// a daemon is used for any reason.
			forceExit false

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}
	}
}

mixin {
	add sourceSets.main, "${mod_id}.refmap.json"
	config "${mod_id}.mixins.json"

	debug = true
	debug.export = true
	hotSwap = true
}

sourceSets.main.resources {
	srcDir 'src/generated/resources'
}

repositories {
	mavenLocal()
	maven { url 'https://maven.tterrag.com/' }

	// GitHub Packages require read access
	if(project.hasProperty('apex_git_package_token')) {
		maven {
			url = uri("https://maven.pkg.github.com/ApexModder/JavaUtilities")
			credentials {
				username = 'Apex-GitHub-PackagesToken'
				password = project.getProperty('apex_git_package_token')
			}
		}
	} else if(System.getenv('GITHUB_TOKEN') != null) {
		// github workflows have a different set of credentials
		maven {
			url = uri("https://maven.pkg.github.com/ApexModder/JavaUtilities")
			credentials {
				username = System.getenv('GITHUB_ACTOR')
				password = System.getenv('GITHUB_TOKEN')
			}
		}
	}
}

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

	// Mixin AP
	annotationProcessor "org.spongepowered:mixin:${mixin_ap_version}:processor"

	compileOnly fg.deobf("com.tterrag.registrate:Registrate:MC${minecraft_version}-${registrate_version}")
	runtimeOnly fg.deobf("com.tterrag.registrate:Registrate:MC${minecraft_version}-${registrate_version}")
	shade "com.tterrag.registrate:Registrate:MC${minecraft_version}-${registrate_version}"

	if(project.hasProperty('apex_local_deps') && project.getProperty('apex_local_deps')) {
		// runtimeOnly fg.deobf('xyz.apex.forge:devworld:1.16.5-2.0.0')
		runtimeOnly fg.deobf("xyz.apex.forge:smoothboot:${minecraft_version}-${smooth_boot_version}")
	}

	if(project.hasProperty('apex_git_package_token') || System.getenv('GITHUB_TOKEN') != null) {
		// we have access to Apex's GH Packages pull from there
		compileOnly "xyz.apex.java.utility:javautilities:${javautilities_version}"
		runtimeOnly "xyz.apex.java.utility:javautilities:${javautilities_version}"
		shade "xyz.apex.java.utility:javautilities:${javautilities_version}"
	} else {
		// no public location
	}
}

def resourceTargets = [ 'META-INF/mods.toml', 'pack.mcmeta', "${mod_id}.mixins.json".toString() ]
def intoTargets = [ "${rootDir}/out/production/resources/", "${rootDir}/out/production/${project.name}.main/", "${rootDir}/bin/main/" ]
def replaceProperties = [
	minecraft_version: minecraft_version,
	minecraft_version_range: minecraft_version_range,
	minecraft_version_short: minecraft_version_short,
		
	forge_version: forge_version,
	forge_version_range: forge_version_range,
	forge_gradle_version: forge_gradle_version,

	mixin_gradle_version: mixin_gradle_version,
	mixin_ap_version: mixin_ap_version,
	
	mappings_channel: mappings_channel,
	mappings_version: mappings_version,
	
	mod_id: mod_id,
	mod_name: mod_name,
	mod_version: mod_version,
	mod_base_package: mod_base_package,
	mod_authors: mod_authors,

	registrate_version: registrate_version,
	registrate_package: registrate_package,

	gradle_shadow_version: gradle_shadow_version,
	smooth_boot_version: smooth_boot_version,
	javautilities_version: javautilities_version
]

processResources {
	inputs.properties replaceProperties
	replaceProperties.put 'project', project

	filesMatching(resourceTargets) {
		expand replaceProperties
	}

	intoTargets.each { target ->
		if(file(target).exists()) {
			copy{
				from(sourceSets.main.resources) {
					include resourceTargets
					expand replaceProperties
				}

				into target
			}
		}
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier 'sources'
	from sourceSets.main.allJava
}

task deobfJar(type: Jar) {
	classifier 'deobf'
	from sourceSets.main.output
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier 'javadoc'
	from javadoc.destinationDir
}

jar {
	classifier 'slim'

	from sourceSets.main.output.classesDirs
	from sourceSets.main.output.resourcesDir
}

shadowJar {
	classifier ''
	configurations = [ project.configurations.shade ]
	relocate "${registrate_package}", "xyz.apex.repack.${registrate_package}"
}

artifacts {
	archives jar
	archives sourcesJar
	archives deobfJar
	archives javadocJar
	archives shadowJar
}

tasks.withType(Jar) {
	manifest {
		attributes([
				'Specification-Title': "${mod_name}",
				'Specification-Vendor': "${mod_authors}",
				'Specification-Version': "${mod_version}",
				'Implementation-Title': "${mod_name}",
				'Implementation-Version': "${project.version}",
				'Implementation-Vendor' : "${mod_authors}",
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				'MixinConfigs': "${mod_id}.mixins.json"
		])
	}
}

reobf {
	shadowJar { }
}

jar.finalizedBy('reobfJar')

publishing {
	if(System.getenv('GITHUB_TOKEN') != null) {
		publications {
			gpr(MavenPublication) {
				groupId = "${mod_base_package}"
				artifactId = "${mod_id}"
				version = "${minecraft_version}-${mod_version}"

				artifact jar
				artifact sourcesJar
				artifact deobfJar
				artifact javadocJar
				artifact shadowJar
			}
		}

		repositories {
			maven {
				name = 'GitHubPackages'
				url = uri('https://maven.pkg.github.com/ApexModder/Registrator')

				credentials {
					username = System.getenv('GITHUB_ACTOR')
					password = System.getenv('GITHUB_TOKEN')
				}
			}
		}
	}
}

if(project.hasProperty('apex_curse_gradle_token')) {
	curseforge {
		apiKey = project.getProperty('apex_curse_gradle_token')

		project {
			id = "${mod_curseforge_id}"
			releaseType = 'release'
			addGameVersion "${minecraft_version}"

			mainArtifact shadowJar
			addArtifact jar
			addArtifact deobfJar
			addArtifact sourcesJar
			addArtifact javadocJar
		}
	}
} else if(System.getenv('CURSEFORGE_TOKEN') != null) {
	curseforge {
		apiKey = System.getenv('CURSEFORGE_TOKEN')

		project {
			id = "${mod_curseforge_id}"
			releaseType = 'release'
			addGameVersion "${minecraft_version}"

			mainArtifact shadowJar
			addArtifact jar
			addArtifact deobfJar
			addArtifact sourcesJar
			addArtifact javadocJar
		}
	}
}