buildscript {
	repositories {
		maven { url = 'https://maven.minecraftforge.net' }
		maven { url = 'https://maven.parchmentmc.org' }
		maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${forge_gradle_version}", changing: true
		classpath "org.parchmentmc:librarian:${librarian_version}"
		classpath "org.spongepowered:mixingradle:${mixin_gradle_version}"
	}
}

plugins {
	id 'com.github.johnrengelman.shadow' version "${gradle_shadow_version}"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'

version = "${minecraft_version}-${mod_version}"
group = "${mod_base_package}.${mod_id}"
archivesBaseName = "${mod_id}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

configurations {
	shade
}

minecraft {
	mappings channel: "${mappings_channel}", version: "${mappings_version}"
	accessTransformer = file('accesstransformer.cfg')

	runs {
		client {
			taskName 'Client'
			workingDirectory project.file('run/client')
			// property 'forge.logging.markers', 'REGISTRIES'
			// property 'forge.logging.console.level', 'debug'
			property 'fml.earlyprogresswindow', 'false'
			property 'forge.enabledGameTestNamespaces', mod_id

			if(project.hasProperty('mc_uuid') & project.hasProperty('mc_username')) {
				args '--uuid', project.getProperty('mc_uuid'), '--username', project.getProperty('mc_username')
			}

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

		server {
			taskName 'Server'
			workingDirectory project.file('run/server')
			// property 'forge.logging.markers', 'REGISTRIES'
			// property 'forge.logging.console.level', 'debug'
			property 'fml.earlyprogresswindow', 'false'
			property 'forge.enabledGameTestNamespaces', mod_id
			args 'nogui'

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

		gameTestServer {
			taskName 'GameTestServer'
			workingDirectory rootProject.file('run/server')
			// property 'forge.logging.markers', 'REGISTRIES'
			// property 'forge.logging.console.level', 'debug'
			property 'fml.earlyprogresswindow', 'false'
			property 'forge.enabledGameTestNamespaces', mod_id
			args 'nogui'
			singleInstance true

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

		data {
			taskName 'Data'
			workingDirectory project.file('run/client')
			// property 'forge.logging.markers', 'REGISTRIES'
			// property 'forge.logging.console.level', 'debug'
			property 'fml.earlyprogresswindow', 'false'
			args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
			// ForgeGradle will just force-exit the Gradle Daemon which fails our builds in case
			// a daemon is used for any reason.
			forceExit false

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}
	}
}

mixin {
	add sourceSets.main, "${mod_id}.refmap.json"
	config "${mod_id}.mixins.json"

	/*debug = true
	debug.export = true
	hotSwap = true*/
}

sourceSets.main.resources {
	srcDir 'src/generated/resources'
}

repositories {
	mavenCentral()
	maven { url 'https://maven.tterrag.com/' }
	maven { url 'https://apexmodder.jfrog.io/artifactory/mods-maven/' }
}

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

	annotationProcessor "org.spongepowered:mixin:${mixin_ap_version}:processor"

	compileOnly fg.deobf("com.tterrag.registrate:Registrate:MC${minecraft_version_short}-${registrate_version}:sources")
	compileOnly fg.deobf("com.tterrag.registrate:Registrate:MC${minecraft_version_short}-${registrate_version}")
	runtimeOnly fg.deobf("com.tterrag.registrate:Registrate:MC${minecraft_version_short}-${registrate_version}")

	compileOnly "xyz.apex.java.utility:javautilities:${javautilities_version}:deobf"
	compileOnly "xyz.apex.java.utility:javautilities:${javautilities_version}:sources"
	runtimeOnly "xyz.apex.java.utility:javautilities:${javautilities_version}"

	runtimeOnly fg.deobf("xyz.apex.forge.utility:${devworld_mod_id}:${minecraft_version}-${devworld_version}:deobf")
	runtimeOnly fg.deobf("xyz.apex.forge.utility:${smoothboot_mod_id}:${minecraft_version}-${smoothboot_version}:deobf")
}

def resourceTargets = [ 'META-INF/mods.toml', '**/*.mcmeta' ]
def intoTargets = [ "${projectDir}/out/production/resources/", "${projectDir}/out/production/${project.name}.main/", "${projectDir}/bin/main/" ]
def replaceProperties = project.properties

processResources {
	filesMatching(resourceTargets) {
		expand replaceProperties
	}

	intoTargets.each { target ->
		if(file(target).exists()) {
			copy{
				from(sourceSets.main.resources) {
					include resourceTargets
					expand replaceProperties
				}

				into target
			}
		}
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier 'sources'
	from sourceSets.main.allJava
}

task deobfJar(type: Jar) {
	classifier 'deobf'
	from sourceSets.main.output
}

jar {
	classifier 'slim'

	from sourceSets.main.output.classesDirs
	from sourceSets.main.output.resourcesDir
}

shadowJar {
	classifier ''
	configurations = [ project.configurations.shade ]
	relocate "${registrate_package}", "xyz.apex.repack.${registrate_package}"
}

artifacts {
	archives jar
	archives sourcesJar
	archives deobfJar
	archives shadowJar
}

tasks.withType(Jar) {
	from(file('accesstransformer.cfg')) {
		into '/META-INF'
	}

	manifest {
		attributes([
				'Specification-Title': "${mod_name}",
				'Specification-Vendor': "${mod_authors}",
				'Specification-Version': "${mod_version}",
				'Implementation-Title': "${mod_name}",
				'Implementation-Version': "${project.version}",
				'Implementation-Vendor' : "${mod_authors}",
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				'MixinConfigs': "${mod_id}.mixins.json"
		])
	}
}

reobf {
	shadowJar { }
}

jar.finalizedBy('reobfJar')

if(System.getenv('APEX_MODS_MAVEN_USERNAME') != null && System.getenv('APEX_MODS_MAVEN_PASSWORD') != null) {
	publishing {
		publications {
			mavenJava(MavenPublication) {
				groupId = "${mod_base_package}"
				artifactId = "${mod_id}"
				version = "${minecraft_version}-${mod_version}"

				artifact jar
				artifact sourcesJar
				artifact deobfJar
				artifact shadowJar
			}
		}
		repositories {
			maven {
				name 'ApexMods-Maven'
				url 'https://apexmodder.jfrog.io/artifactory/mods-maven/'

				credentials {
					username System.getenv('APEX_MODS_MAVEN_USERNAME')
					password System.getenv('APEX_MODS_MAVEN_PASSWORD')
				}
			}
		}
	}
}