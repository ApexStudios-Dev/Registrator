buildscript {
	repositories {
		maven { url = 'https://maven.minecraftforge.net' }
		maven { url = 'https://maven.parchmentmc.org' }
		maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${forge_gradle_version}", changing: true
		classpath "org.parchmentmc:librarian:${librarian_version}"
		classpath "org.spongepowered:mixingradle:${mixin_gradle_version}"
	}
}

plugins {
	id 'com.github.johnrengelman.shadow' version "${gradle_shadow_version}"
	id 'com.matthewprenger.cursegradle' version "${cursegradle_version}"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'

version = "${minecraft_version}-${mod_version}"
group = "${mod_base_package}.${mod_id}"
archivesBaseName = "${mod_id}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

configurations {
	shade
}

minecraft {
	mappings channel: "${mappings_channel}", version: "${mappings_version}"
	accessTransformer = rootProject.file('accesstransformer.cfg')

	runs {
		if(rootProject.name == project.name) {
			client {
				taskName 'Client'
				workingDirectory rootProject.file('run/client')
				// property 'forge.logging.markers', 'REGISTRIES'
				// property 'forge.logging.console.level', 'debug'
				property 'fml.earlyprogresswindow', 'false'

				mods {
					"${mod_id}" {
						source sourceSets.main
					}
				}
			}

			if(project.hasProperty('mc_uuid') & project.hasProperty('mc_username')) {
				clientAuthed {
					parent runs.client
					taskName 'Client-Authed'
					args '--uuid', project.getProperty('mc_uuid'), '--username', project.getProperty('mc_username')
				}
			}

			server {
				taskName 'Server'
				workingDirectory rootProject.file('run/server')
				// property 'forge.logging.markers', 'REGISTRIES'
				// property 'forge.logging.console.level', 'debug'
				property 'fml.earlyprogresswindow', 'false'
				args 'nogui'

				mods {
					"${mod_id}" {
						source sourceSets.main
					}
				}
			}
		}

		data {
			taskName 'Data'
			workingDirectory rootProject.file('run/client')
			// property 'forge.logging.markers', 'REGISTRIES'
			// property 'forge.logging.console.level', 'debug'
			property 'fml.earlyprogresswindow', 'false'
			args '--mod', mod_id, '--client', '--server', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
			// ForgeGradle will just force-exit the Gradle Daemon which fails our builds in case
			// a daemon is used for any reason.
			forceExit false

			if(rootProject.name != project.name) {
				ideaModule "${rootProject.name}.${project.name}.main"
			}

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}
	}
}

mixin {
	add sourceSets.main, "${mod_id}.refmap.json"
	config "${mod_id}.mixins.json"

	debug = true
	debug.export = true
	hotSwap = true
}

sourceSets.main.resources {
	srcDir 'src/generated/resources'
}

repositories {
	mavenCentral()
	mavenLocal()
	maven { url 'https://dvs1.progwml6.com/files/maven' }
	maven { url 'https://maven.tterrag.com/' }

	if(project.hasProperty('apex_git_package_token')) {
		maven {
			url = uri("https://maven.pkg.github.com/ApexModder/JavaUtilities")
			credentials {
				username = 'Apex-GitHub-PackagesToken'
				password = project.getProperty('apex_git_package_token')
			}
		}
	} else if(System.getenv('GITHUB_TOKEN') != null) {
		maven {
			url = uri("https://maven.pkg.github.com/ApexModder/JavaUtilities")
			credentials {
				username = System.getenv('GITHUB_ACTOR')
				password = System.getenv('GITHUB_TOKEN')
			}
		}
	}
}

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
	annotationProcessor "org.spongepowered:mixin:${mixin_ap_version}:processor"

	compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
	runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

	implementation fg.deobf("com.tterrag.registrate:Registrate:MC${minecraft_version}-${registrate_version}")
	shade "com.tterrag.registrate:Registrate:MC${minecraft_version}-${registrate_version}"

	if(project.hasProperty('apex_git_package_token') || System.getenv('GITHUB_TOKEN') != null) {
		implementation "xyz.apex.java.utility:javautilities:${javautilities_version}"
		shade "xyz.apex.java.utility:javautilities:${javautilities_version}"
	} else {
		// currently there is no public location
		// this may change in the future
		// as of now, to be able to load this project yourself
		// locally you also have to clone my JavaUtilities repo, build & publish it to your local maven
		// git clone https://github.com/ApexModder/JavaUtilities --branch J8
		// gradlew publish
		// after this has finished, the project should import and detect JavaUtilities just fine
	}
}

def resourceTargets = [ 'META-INF/mods.toml', 'pack.mcmeta', "${mod_id}.mixins.json".toString() ]
def intoTargets = [ "${rootDir}/out/production/resources/", "${rootDir}/out/production/${project.name}.main/", "${rootDir}/bin/main/" ]
def replaceProperties = project.properties

processResources {
	filesMatching(resourceTargets) {
		expand replaceProperties
	}

	intoTargets.each { target ->
		if(file(target).exists()) {
			copy{
				from(sourceSets.main.resources) {
					include resourceTargets
					expand replaceProperties
				}

				into target
			}
		}
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier 'sources'
	from sourceSets.main.allJava
}

task deobfJar(type: Jar) {
	classifier 'deobf'
	from sourceSets.main.output
}

jar {
	classifier 'slim'

	from sourceSets.main.output.classesDirs
	from sourceSets.main.output.resourcesDir
}

shadowJar {
	classifier ''
	configurations = [ project.configurations.shade ]
	relocate "${registrate_package}", "xyz.apex.repack.${registrate_package}"
}

artifacts {
	archives jar
	archives sourcesJar
	archives deobfJar
	archives shadowJar
}

tasks.withType(Jar) {
	from(rootProject.file('accesstransformer.cfg')) {
		into '/META-INF'
	}

	manifest {
		attributes([
				'Specification-Title': "${mod_name}",
				'Specification-Vendor': "${mod_authors}",
				'Specification-Version': "${mod_version}",
				'Implementation-Title': "${mod_name}",
				'Implementation-Version': "${project.version}",
				'Implementation-Vendor' : "${mod_authors}",
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				'MixinConfigs': "${mod_id}.mixins.json"
		])
	}
}

reobf {
	shadowJar { }
}

jar.finalizedBy('reobfJar')

publishing {
	if(System.getenv('GITHUB_TOKEN') != null) {
		publications {
			gpr(MavenPublication) {
				groupId = "${mod_base_package}"
				artifactId = "${mod_id}"
				version = "${minecraft_version}-${mod_version}"

				artifact jar
				artifact sourcesJar
				artifact deobfJar
				artifact shadowJar
			}
		}

		repositories {
			maven {
				name = 'GitHubPackages'
				url = uri('https://maven.pkg.github.com/ApexModder/Registrator')

				credentials {
					username = System.getenv('GITHUB_ACTOR')
					password = System.getenv('GITHUB_TOKEN')
				}
			}
		}
	}
}

if(project.hasProperty('apex_curse_gradle_token')) {
	curseforge {
		apiKey = project.getProperty('apex_curse_gradle_token')

		project {
			id = "${registrator_cf_project}"
			releaseType = 'release'
			addGameVersion "${minecraft_version}"

			mainArtifact shadowJar
			addArtifact jar
			addArtifact deobfJar
			addArtifact sourcesJar
		}
	}
} else if(System.getenv('CURSEFORGE_TOKEN') != null) {
	curseforge {
		apiKey = System.getenv('CURSEFORGE_TOKEN')

		project {
			id = "${registrator_cf_project}"
			releaseType = 'release'
			addGameVersion "${minecraft_version}"

			mainArtifact shadowJar
			addArtifact jar
			addArtifact deobfJar
			addArtifact sourcesJar
		}
	}
}